<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        //let c=()=>{
            //console.log("hi pavan")
        //}
        //c()
        //let x=(x,y)=>{
            //console.log(x+y)
        //}
        //x(20,30)
        //x(40,50)
        //let greet=x=>console.log(x);
        //greet('hello')
        //let greet=() =>console.log("hello")
        //greet()
        //let age = 18;
        //let welcome = (age < 18) ?
        //() => console.log('pavan'):
        //() => console.log('sai');
        //welcome();
        //function task1() {
            //console.log("Task1 : Start");
        //}
        
        //function task2() {
            //console.log("Task2 : Start");
        //}
        
        //function task3() {
            //console.log("Task3 : Start");
        //}
        
        //task1();
        //task2();
        //task3();
        
        //console.log("hi pavan");
        //setTimeout(() =>{
            //console.log("hi I am waiting")
        //},5000);
        //console.log("I am in lab")

        //function greet(name, callback) {
            //console.log(`Hello, ${name}!`);
            //callback();
        //}
        //function sayGoodbye() {
            //console.log("Goodbye");
        //}
        //greet("Sam", sayGoodbye);
        
        let myPromise = new Promise((resolve, reject) => {
            let success = true;
            if(success) {
                resolve("Task completed");
            } else {
                reject("Task failed");
            }
        });
        
        myPromise
            .then((message) => {
                console.log(message);  // This will log "Task completed" if resolved
            })
            .catch((message) => {
                console.log(message);  // This will log "Task failed" if rejected
            });
        
    </script>
</body>
</html>



theory notes :
Arrow functions:
---Es6 version
--more readable and more structure
--anonymous functions(lambda functions)
--without function name but they are assigned to a variable
Example :
Arrow functions with out parameters:

let c=()=>{
console.log("hi pavan")
}
c()
 
Arrow functions with parameters :

let x=(x,y)=>{
            console.log(x+y)
        }
        x(20,30)
        x(40,50)

Example:
Arrow function with one argument:
#without using ()
let greet=x=>console.log(x);
greet('hello')

Arrow function without argument:
Let greet=() =>console.log("hello)
greet()

Example: Arrow functions as an expression
let age = 18;
let welcome = (age < 18) ?
    () => console.log('pavan') :
    () => console.log('sai');
welcome();


--Synchronous and Asynchronous:
--step by step
--one task
Example :
Function task1{
Console.log("Task1 : start"
}
Function task2{
Console.log("Task2 : start"
}
Function task3{
Console.log("Task3 : start"
}

Asynchronous : 
Example :
console.log("hi pavan");
        setTimeout(() =>{
            console.log("hi I am waiting")
        },5000);
        console.log("I am in lab")

JavaScript callbacks :
1.functions
2.oops
3.file handling
4.multithreading
5.Excpetion handling
6.json

Javascript callbacks:
A call back function is a function that is passed argument to another function;

function greet(name, callback) {
    console.log(`Hello, ${name}!`);
    callback();
}

function sayGoodbye() {
    console.log("Goodbye");
}

greet("Sam", sayGoodbye);

Promise:
--eventual completion
Three states :
1.pending : --still not completed --continuing 
2.fulfilled == task completed
3.Rejected ==The operation is failed




